1 1 1 2 2 3

3 unique
3 dups

array sorted
len
modify input array
O(n); S(1)
#include <stdio.h>

int removeDuplicates(int* arr, int n){
if (n==0 || n==1)
        return n;

    // To store index of next unique element
    int j = 0;

    // Doing same as done in Method 1
    // Just maintaining another updated index i.e. j
    for (int i=0; i < n-1; i++)
        if (arr[i] != arr[i+1])
            arr[j++] = arr[i];

   // arr[j++] = arr[n-1];

    return j;
}

int main()
{
    int arr[] = {1, 2, 2, 3, 4, 4, 4, 5, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    // removeDuplicates() returns new size of
    // array.
    int t = removeDuplicates(arr, n);

    // Print updated array
        printf("n = %d; unique = %d; dups = %d ",n, t, n-t);

    return 0;

}


#include<stdio.h>


int isSubstring(char s1[], char s2[]) 
{ 
    int N = 13;
    int M = 3;
  
    for (int i = 0; i <= N - M; i++) { 
        int j; 
  
        for (j = 0; j < M; j++) 
            if (s2[i + j] != s1[j]) 
                break; 
  
        if (j == M) 
            return i; 
    } 
  
    return -1; 
} 
  
/* Driver program to test above function */
int main() 
{ 
    char s1[] = "for"; 
    char s2[] = "geeksforgeeks"; 
    int res = isSubstring(s1, s2); 
    if (res == -1) 
        printf("Not present"); 
    else
        printf("at position %d", res); 
    return 0; 
} 





